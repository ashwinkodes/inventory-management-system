// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  password      String   // Added password field
  name          String
  phone         String?
  role          String @default("MEMBER") // "ADMIN" or "MEMBER"
  clubIds       String @default("default-club") // JSON string or comma-separated
  isActive      Boolean  @default(true)
  isApproved    Boolean  @default(false) // Admin approval required
  approvedBy    String?  // Admin who approved the user
  approvedAt    DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  requests Request[]
  sessions Session[]

  @@map("users")
}

model GearItem {
  id            String       @id @default(cuid())
  name          String
  brand         String?
  model         String?
  category      String // "BACKPACK", "TENT", etc.
  description   String?
  condition     String @default("GOOD") // "EXCELLENT", "GOOD", "FAIR", "POOR"
  size          String?
  weight        String?
  imageUrl      String?
  purchaseDate  DateTime?
  purchasePrice Float?
  clubId        String // Which club owns this gear
  isActive      Boolean      @default(true)
  notes         String? // Admin notes about maintenance, etc.
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // Relations
  requests RequestItem[]

  @@map("gear_items")
}

model Request {
  id          String        @id @default(cuid())
  userId      String
  status      String @default("PENDING") // "PENDING", "APPROVED", "REJECTED", etc.
  requestType String @default("MEMBER") // "MEMBER" or "NON_MEMBER"

  // Dates
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Trip details
  tripName       String? // Name of the trip/event
  intentionsCode String? // Safety intentions code

  // Optional details
  purpose    String? // What they're using it for
  experience String? // Their experience level
  notes      String? // Additional notes

  // Admin fields
  adminNotes String?
  approvedBy String?
  approvedAt DateTime?

  // Relations
  user  User          @relation(fields: [userId], references: [id])
  items RequestItem[]

  @@map("requests")
}

model RequestItem {
  id        String @id @default(cuid())
  requestId String
  gearId    String
  quantity  Int    @default(1)

  // Status for individual items
  status String @default("PENDING") // "PENDING", "APPROVED", "CHECKED_OUT", etc.

  // Check-in/out tracking
  checkedOutAt DateTime?
  checkedInAt  DateTime?
  condition    String? // "EXCELLENT", "GOOD", "FAIR", "POOR"
  damageNotes  String?

  // Relations
  request Request  @relation(fields: [requestId], references: [id], onDelete: Cascade)
  gear    GearItem @relation(fields: [gearId], references: [id])

  @@unique([requestId, gearId])
  @@map("request_items")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Note: Using strings instead of enums for SQLite compatibility
// Valid values documented in comments above each field
